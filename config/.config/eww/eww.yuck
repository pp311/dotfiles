;; Variables

;; (include "sidebar.yuck")
;; (include "notifications.yuck")

(defpoll monitors :interval "1m" "hyprctl monitors -j | jq -rc '[ .[].id ] | sort_by( . )'")
(defpoll clock_time :interval "5s" "date '+\%l\%M \%p'")
(defpoll clock_date :interval "10h" "date '+%b %d, %Y'")
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")
(defpoll volume_percent :interval "1s"  "scripts/sbvol --get")
(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll brightness_percent :interval "5s" "brightnessctl -m | awk -F, '{print $4}' | tr -d %")
(defpoll COL_WLAN :interval "1m" "scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "scripts/wifi --ICON")
(defpoll update_count :interval "5m" "~/.local/bin/update-sys")
(deflisten workspace "scripts/workspace")
(deflisten workspace1 "scripts/workspace1")
(deflisten appname "scripts/appname")
(deflisten net_speed "~/.local/bin/traffic.sh")

(defpoll song :interval "2s"  "scripts/music title")
(defpoll song_artist :interval "2s"  "scripts/music artist")
(defpoll current_status :interval "1s"  "scripts/music percent")
(defpoll song_status :interval "2s"  "scripts/music statusicon")
(defpoll cover_art :interval "2s"  "scripts/music coverloc")

(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar control_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(defvar speed_rev false)
(defvar update_rev false)


;; widgets

(defwidget music [] 
  (eventbox
    :onhover "${EWW_CMD} update music_reveal=true"
	:onhoverlost "${EWW_CMD} update music_reveal=false"
	(box 
	    :class "module-2"
	    :orientation "h"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false" 
		(box 
		    :class "song_cover_art"
		    :vexpand "false"
		    :hexpand "false"
		    :style "background-image: url('${cover_art}');")
		(button
		    :class "song"
		    :wrap "true"
		    :onclick "scripts/pop music" song)
	    (revealer 
	        :transition "slideright"
			:reveal music_reveal
			:duration "350ms"
        (box 
            :vexpand "false"
            :hexpand "false"
            :oreintation "h" 
            (button
                :class "song_btn_prev"
                :onclick "scripts/music previous" "")
				    (button 
				        :class "song_btn_play"
				        :onclick "scripts/music toggle" song_status)
				    (button 
				        :class "song_btn_next"
				        :onclick "scripts/music next" "")
				)))))

;;  Music Pop-Up
(defwidget music_pop []
	(box 
	    :class "music_pop" 
	    :orientation "h"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false"
		(box 
		    :class "music_cover_art"
		    :vexpand "false"
		    :hexpand "false"
		    :style "background-image: url('${cover_art}');")
		(box 
		    :orientation "v"
		    :spacing 20 
		    :space-evenly "false"
		    :vexpand "false"
		    :hexpand "false"
			(label
			    :halign "center"
			    :class "music"
			    :wrap "true"
			    :limit-width 13
			    :text song)
			(label
			    :halign "center"
			    :class "music_artist"
			    :wrap "true" 
			    :limit-width 15 
			    :text song_artist)
			(box 
			    :orientation "h"
			    :spacing 15 
			    :halign "center"
			    :space-evenly "false"
			    :vexpand "false"
			    :hexpand "false"
				(button
				    :class "music_btn_prev"
				    :onclick "scripts/music previous" "")
				(button
				    :class "music_btn_play"
				    :onclick "scripts/music toggle" song_status)
				(button
				    :class "music_btn_next"
				    :onclick "scripts/music next" ""))
			(box 
			    :class "music_bar"
			    :halign "center"
			    :vexpand "false"
			    :hexpand "false"
			    :space-evenly "false"
				(scale
				    :onchange "scripts/music seek {}"
				    :min 0 
				    :active "true"
				    :max 100 
				    :value current_status)
				    ))))
(defwindow music_win 
    :stacking "fg"
    :focusable "false"
    :screen 1
    ;; :monitor 0
	:geometry (geometry 
        :x "0" 
        :y "2%" 
        :width 428 
        :height 104 
        :anchor "top center")
    (music_pop))

(defwidget launcher []
  (box 
    :class "launcher_module"
    :orientation "h"
    (button
        :onclick "wofi &"
        :class "iconlauncher" "")
   ))

(defwidget workspaces []
  (literal 
    :content workspace))

(defwidget workspaces1 []
  (literal 
    :content workspace1))

(defwidget appnames []
  (eventbox
    :onhover "${EWW_CMD} update control_reveal=true"
	  :onhoverlost "${EWW_CMD} update control_reveal=false"
    (box
	    :orientation "h"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false" 
        (literal 
            :content appname)
	    (revealer
	      :transition "slideright"
		    :reveal control_reveal
		    :duration "350ms"
        (box
            :vexpand "false"
            :hexpand "false"
            :orientation "h"
            :space-evenly "false"
            (button
                :class "app-button"
                :onclick "hyprctl dispatch togglefloating 1" "") 
		  	    (button
		  	        :class "app-button"
		  	        :onclick "hyprctl dispatch fullscreen 1" "")
		  	    (button
		  	        :class "app-button"
                :onclick "hyprctl dispatch killactive 1" ""))))))

(defwidget bright []
  (eventbox
    :onhover "${EWW_CMD} update br_reveal=true" 
    :onhoverlost "${EWW_CMD} update br_reveal=false"
    (box 
        :class "module" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3" 
	    (revealer 
	        :transition "slideright"
		    :reveal br_reveal
			:duration "350ms"
	        (scale    :class "brightbar"
			    :value brightness_percent
			    :orientation "h"
			    :tooltip "${brightness_percent}%"
			    :max 100
			    :min 0
			    :onchange "brightnessctl s {}%" ))
        (label
            :text "󰃟"
            :class "bright_icon"
            :tooltip "brightness"))))

(defwidget volume []
  (eventbox 
    :onhover "${EWW_CMD} update vol_reveal=true"
	:onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal vol_reveal
			    :duration "350ms"
	            (scale  
	                :class "volbar"
			        :value volume_percent
			        :orientation "h"
			        :tooltip "${volume_percent}%"
			        :max 100
			        :min 0
			        :onchange "pamixer --set-volume {}" ))
	        (button
	            :onclick "${EWW_CMD} open --toggle audio_ctl --screen 0"
	            :class "volume_icon"
	            "墳"))))

(defwidget wifi [] 
  (eventbox 
    :onhover "${EWW_CMD} update wifi_rev=true"
	:onhoverlost "${EWW_CMD} update wifi_rev=false"
	(box
	    :vexpand "false"
	    :hexpand "false"
	    :space-evenly "false"
	    (revealer 
	        :transition "slideright"
		    :reveal wifi_rev
			:duration "350ms"
	        (label
	            :class "module_essid"
			    :text ESSID_WLAN
			  ))
		(button
		    :class "module-wif"
		    :onclick "nm-connection-editor &"
		    WLAN_ICON))))

(defwidget speed [] 
  (eventbox 
    :onhover "${EWW_CMD} update speed_rev=true"
	:onhoverlost "${EWW_CMD} update speed_rev=false"
	(box
	    :vexpand "false"
	    :hexpand "false"
	    :space-evenly "false"
	    (revealer 
	        :transition "slideright"
		    :reveal speed_rev
			:duration "350ms"
	        (label
	            :class "module_speed"
			    :text net_speed
			  ))
		(label
		    :class "module_sp"
        :text '󰁇'))))

(defwidget update [] 
  (eventbox 
    :onhover "${EWW_CMD} update update_rev=true"
	:onhoverlost "${EWW_CMD} update update_rev=false"
	(box
	    :vexpand "false"
	    :hexpand "false"
	    :space-evenly "false"
	    (revealer 
	        :transition "slideright"
		    :reveal update_rev
			:duration "350ms"
	        (label
	            :class "module_update"
			    :text update_count
			  ))
		(button
		    :class "module_up"
        :onclick "~/.local/bin/update-sys update &"
        '󰚰'))))

(defwidget bat []
		(box
		    :class "bat_module"
		    :vexpand "false"
		    :hexpand "false" 
            (circular-progress
                :value {EWW_BATTERY["BAT1"].capacity}
                :class "batbar"
                :thickness 4
                (button 
                    :class "iconbat"
                    :limit-width 2
                    :tooltip "battery on ${EWW_BATTERY["BAT1"].capacity}%"
                    :show_truncated false
                    :onclick "${EWW_CMD} open --toggle system --screen 0"
                    :wrap false
                    ""))))

(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {EWW_RAM.used_mem_perc}
                :class "membar"
                :thickness 4
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${round(EWW_RAM.used_mem_perc,0)}% ram"
                :onclick "${EWW_CMD} open --toggle system --screen 0"
                :show_truncated false
                :wrap false
                ""))))

(defwidget cpu []
		(box :class "cpu_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {EWW_CPU.avg}
                :class "cpubar"
                :thickness 4
            (button 
                :class "iconcpu"
                :limit-width 2
                :tooltip "using ${round(EWW_CPU.avg,0)}% cpu"
                :onclick "${EWW_CMD} open --toggle system --screen 0"
                :show_truncated false
                :wrap false
                ""))))
(defwidget clock_module []
  (eventbox
      :onhover "${EWW_CMD} update time_rev=true"
  	:onhoverlost "${EWW_CMD} update time_rev=false"
      (box
          :class "module"
          :space-evenly "false"
          :orientation "h"
          :spacing "0" 
          (label
              :text clock_time
              :class "clock_time_class" )
          (revealer :transition "slideleft"
  		    :reveal time_rev
  		    :duration "350ms"
              (button 
                  :class "clock_date_class"
                  :onclick "${EWW_CMD} open --toggle calendar --screen 0" clock_date)))))

(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
	    :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label
      :text ""))))
(defwidget power_button []
  (box
    :class "power_button"
    :space-evenly "false"
    :orientation "h"
    (button
	    :onclick "wlogout -b 2 -c 0 -r 0  -T 250 -B 250 --protocol layer-shell &"
      (label
      :text ""))))
  
(defwidget sep []
  (box 
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
        :class "separ"
        :text "|")))

(defwidget gap []
  (box 
    :orientation "h"
    :hexpand "false"
    :visible "true"
    :width "150"))


;;define widget groups
(defwidget left []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "start"
		:class "left_modules"
    (launcher)
    (sep)
    (workspaces)))

(defwidget left1 []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "start"
		:class "left_modules"
    (launcher)
    (sep)
    (workspaces1)))

(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
    (music)))

(defwidget right []
	(box
	    :orientation "h" 
		:space-evenly false  
        :halign "end"
		:class "right_modules"
    (bright)
    (volume)
    (wifi)
    (speed)
    (update)
    (sep)
    (cpu)
    (mem)
    (bat)
    (sep)
    (clock_module)
    (power_button)
))

;;Define bar
(defwidget bar_layout []
  (centerbox 
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
    ))

(defwidget bar_layout1 []
  (centerbox 
    :class "bar_class"
    :orientation "h"
    (left1)
    (center)
    (right)
    ))

(defwindow bar0
    :exclusive true
    :monitor 0
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "99%"
        :height "30px"
        :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    (bar_layout))
(defwindow bar1
    :exclusive true
    :monitor 1
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "99%"
        :height "30px"
        :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    (bar_layout1))
(defwindow bar2
    :exclusive true
    :monitor 2
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "99%"
        :height "30px"
        :anchor "top center")
    :stacking "bottom"
    :windowtype "dock"
    (bar_layout))



(defwidget audio []
	(box 
	    :class "audio-box"
	    :orientation "v"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false"
	    (box 
	        :halign "v"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "speaker_icon"
	            :orientation "v")
	        (box 
	            :orientation "v"
	            :halign "center"
	            :vexpand "false"
	            :hexpand "false"
                (label
                    :class "speaker_text"
                    :text "speaker"
                    :valign "center"
                    :halign "left" )
	            (box
	                :class "speaker_bar"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
	                (scale
	                    :value volume_percent
                        :space-evenly "false"
			            :orientation "h"
			            :onchange "pamixer --set-volume {}" 
                        :tooltip "volume on ${volume_percent}%"
			            :max 100
			            :min 0))))
        (label
            :text "_____________________________________"
            :class "audio_sep"
            :halign "center")
	    (box 
	        :halign "v"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "mic_icon"
	            :orientation "v")
	            (box 
	                :orientation "v"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
                    (label
                        :class "mic_text"
                        :text "mic"
                        :valign "center"
                        :halign "left" )
	                (box 
	                    :class "mic_bar"
	                    :halign "center"
	                    :vexpand "false"
	                    :hexpand "false"
	                    (scale
	                        :value mic_percent
                            :space-evenly "false"
			                :orientation "h"
                            :tooltip "mic on ${mic_percent}%"
			                :onchange "amixer -D pulse sset Capture {}%" 
			                :max 100
			                :min 0))))))
(defwindow audio_ctl
    :stacking "fg"
    :focusable "false"
    :screen 1
    ;; :monitor 0
	:geometry (geometry 
        :x "20" 
        :y "2%" 
        :anchor "top right"
		:width "280px" 
		:height "60px")
    (audio))


;;Define System widget  
(defwidget system []
  (box 
    :class "sys_win"
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_cpu_box"
        :orientation "h"
        :space-evenly "false"
        (circular-progress
            :value {EWW_CPU.avg}
            :class "sys_cpu"
            :thickness 9
            (label :text "󰍛"
                :class "sys_icon_cpu"
                :limit-width 2
                :show_truncated false
                :wrap false))
        (box 
            :orientation "v" 
            :space-evenly "false" 
            :spacing 0 
            :hexpand "false"
            :vexpand "false"
            (label
                :text "CPU"
                :halign "start"
                :class "sys_text_cpu"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label 
                :text "${round(EWW_CPU.avg,0)}%"
                :halign "start"
                :class "sys_text_cpu_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            ))
    (label
        :text "____________________________________"
        :class "sys_sep"
        :halign "center")
    (box 
        :class "sys_mem_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {EWW_RAM.used_mem_perc}
            :class "sys_mem"
            :thickness 9
            (label
                :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "v"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${round((EWW_RAM.used_mem / (1024*1024)), 0)} | ${round((EWW_RAM.total_mem / (1024*1024)), 0)} MB "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label 
                :text "${round((EWW_RAM.available_mem / (1024*1024)), 0)} MB free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)))
    (label
        :text "____________________________________"
        :class "sys_sep"
        :halign "center")
    (box 
        :class "sys_bat_box"
        :orientation "h"
        :space-evenly "false"
        (circular-progress
            :value {EWW_BATTERY["BAT1"].capacity}
            :class "sys_bat"
            :thickness 9
            (label :text "󱊢"
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false))
        (box 
            :orientation "v" 
            :space-evenly "false" 
            :spacing 0 
            :hexpand "false"
            :vexpand "false"
            (label
                :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label 
                :text "${EWW_BATTERY["BAT1"].capacity}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label
                :text "${EWW_BATTERY["BAT1"].status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))
            ))
(defwindow system
    :stacking "fg"
    :focusable "false"
    :screen 1
    ;; :monitor 0
	:geometry (geometry
            :x "20" 
			:y "2%" 
            :anchor "top right"
			:width "290px" 
			:height "120px")
    (system))

;;Calendar Widget
(defwidget cal []
	(box 
	    :class "cal"
	    :orientation "v"
	    (box
	        :class "cal-in"
	        (calendar
			  :day calendar_day 
			  :year calendar_year))))
(defwindow calendar
    :stacking "fg"
    :focusable "false"
    :screen 1
    ;; :monitor 0
	:geometry (geometry
        :x "20" 
	    :y "2%" 
        :anchor "top right"
	    :width "270px" 
	    :height "60px")
(cal))
